{"version":3,"sources":["store/index.ts","components/Start.tsx","components/TodoList.tsx","components/SortPanel.tsx","helpers/api.tsx","App.tsx","index.tsx"],"names":["startLoading","type","finishLoading","message","setTodos","todos","isLoading","state","loading","getMessage","getTodos","getVisibleContent","visible","initialState","error","store","createStore","action","filter","todo","id","index","composeWithDevTools","mapDispatch","load","connector","connect","handleLoadClick","title","className","onClick","disabled","TodoList","todosTodoList","useSelector","dispath","useDispatch","map","completed","user","cn","key","name","setDelete","buttons","sortType","SortPanel","dispatch","sort","a","b","localeCompare","sortChange","URL_API","getData","url","fetch","response","json","getTodosFromServer","Promise","all","users","completedTodo","find","userId","App","visibleContent","loadTodos","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29b3adc2.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst TODOS = 'TODOS';\nconst VISIBLE_CONTENT = 'VISIBLE_CONTENT';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SORT_FIELD = 'SORT_FIELD';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\nexport const setTodos = (todos: Todo[] = []) => ({ type: TODOS, todos });\nexport const setVisibleContent = () => ({ type: VISIBLE_CONTENT });\nexport const setDelete = (index: number) => ({ type: DELETE_TODO, index });\nexport const setSortField = (sort: string) => ({ type: SORT_FIELD, sort });\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getVisibleContent = (state: RootState) => state.visible;\n\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  visible: boolean;\n  message: string;\n  todos: CompletedTodo[];\n  error: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  visible: false,\n  message: '',\n  todos: [],\n  error: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n    case TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    case VISIBLE_CONTENT:\n      return {\n        ...state,\n        visible: true,\n      };\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.index),\n      };\n    default:\n      return state;\n  }\n};\n\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState, isLoading, startLoading } from '../store';\n\n/**\n * mapState - is a function receiving full Redux state as the first argument\n * and returning an object with extra props that will be added to a component\n * after calling connect(mapState)(MyComponent)\n *\n * @param {object} state - full Redux state\n *\n * @return {object}\n */\nconst mapState = (state: RootState) => {\n  return {\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\n  };\n};\n\n/**\n * We use an object syntax for `mapDispatch` where\n * `load` - is a callback name passed to the component as a prop\n * `startLoading` - is an action creator defined in the store\n */\nconst mapDispatch = {\n  load: startLoading,\n};\n\n/**\n * We split the connect(mapState, mapDispatch)(MyComponent) into 2 parts\n * to be able to use `typeof connector` for `MyComponent` props\n */\nconst connector = connect(mapState, mapDispatch);\n\n/**\n * We use ConnectedProps<typeof connector> to get the type for all the extra\n * props received from `mapState` and `mapDispatch`\n */\ntype Props = ConnectedProps<typeof connector> & {\n  title: string; // a regular prop passed like <Start title=\"Start loading\" />\n  handleLoadClick: () => void;\n};\n\nconst Start: React.FC<Props> = ({ handleLoadClick, loading, title }) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      onClick={handleLoadClick}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default connector(Start);\n","import React from 'react';\nimport cn from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  getTodos,\n  setDelete,\n} from '../store';\n\n\nexport const TodoList = () => {\n  const todosTodoList = useSelector(getTodos);\n  const dispath = useDispatch();\n\n  const deleteTodo = (index: number) => {\n    dispath(setDelete(index));\n  };\n\n  return (\n    <div>\n      {todosTodoList.map(({\n        completed, user, title, id,\n      }) => (\n        <div\n          className={cn('alert',\n            { 'alert-success': completed, 'alert-primary': !completed })}\n          key={id}\n        >\n          <span className=\"todo-title\">{title}</span>\n          <span>{user.name}</span>\n          <button type=\"button\" onClick={() => deleteTodo(id)}> X</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, setTodos } from '../store';\n\nconst buttons = [\n  { name: 'Sort by Name', sortType: 'title' },\n  { name: 'Sort by Completed', sortType: 'completed' },\n  { name: 'Sort by User Name', sortType: 'user' },\n];\n\n\nconst activeBtn = 'title';\n\nexport const SortPanel = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const sortChange = (sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        dispatch(\n          setTodos(\n            [...todos].sort((a, b) => {\n              return a.title.localeCompare(b.title);\n            }),\n          ),\n        );\n\n        return;\n      case 'completed':\n        dispatch(\n          setTodos(\n            [...todos].sort((a, b) => {\n              return +a.completed - +b.completed;\n            }),\n          ),\n        );\n\n        return;\n      case 'user':\n        dispatch(\n          setTodos(\n            [...todos].sort((a, b) => {\n              return a.user.name.localeCompare(b.user.name);\n            }),\n          ),\n        );\n\n        return;\n      default:\n        dispatch(setTodos(todos));\n    }\n  };\n\n  return (\n    <p>\n      {buttons.map(({ name, sortType }) => {\n        return (\n          <button\n            type=\"button\"\n            key={name}\n            onClick={() => sortChange(sortType)}\n            className={sortType === activeBtn ? 'btn btn-warning active' : 'btn btn-warning'}\n          >\n            {name}\n          </button>\n        );\n      })}\n    </p>\n  );\n};\n","const URL_API = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport async function getData<T>(url: string): Promise<T[]> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\n\nexport async function getTodosFromServer() {\n  const [todos, users] = await Promise.all([\n    getData<Todo>(`${URL_API}/todos.json`),\n    getData<User>(`${URL_API}/users.json`),\n  ]);\n\n  const completedTodo = todos.map((todo) => {\n    return {\n      ...todo,\n      user: users.find(user => user.id === todo.userId),\n    };\n  });\n\n  return completedTodo;\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start';\nimport { TodoList } from './components/TodoList';\nimport { SortPanel } from './components/SortPanel';\n\nimport {\n  startLoading,\n  isLoading,\n  finishLoading,\n  getMessage,\n  setTodos,\n  setVisibleContent,\n  getVisibleContent,\n} from './store';\n\nimport { getTodosFromServer } from './helpers/api';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || '';\n  const visibleContent = useSelector(getVisibleContent);\n\n  const loadTodos = async () => {\n    dispatch(startLoading());\n    try {\n      const todosFromServer = await getTodosFromServer();\n\n      dispatch(setTodos(todosFromServer));\n      dispatch(finishLoading(''));\n      dispatch(setVisibleContent());\n    } catch (err) {\n      dispatch(finishLoading(`Something went wrong: ${err}`));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h5>{loading ? 'Loading...' : message}</h5>\n      {visibleContent ? (\n        <>\n          <SortPanel />\n          <TodoList />\n        </>\n      ) : (\n        <Start title=\"Start loading\" handleLoadClick={loadTodos} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}