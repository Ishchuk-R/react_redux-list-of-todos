{"version":3,"sources":["store/index.ts","components/Start.tsx","components/TodoList.tsx","components/SortPanel.tsx","helpers/api.tsx","App.tsx","index.tsx"],"names":["startLoading","type","finishLoading","message","setTodos","todos","isLoading","state","loading","getMessage","getTodos","getVisibleContent","visible","getSort","sort","initialState","error","store","createStore","action","filter","todo","id","index","composeWithDevTools","mapDispatch","load","connector","connect","handleLoadClick","title","className","onClick","disabled","TodoList","dispath","useDispatch","todosTodoList","useSelector","sortFromRedux","SortTodos","sortType","a","b","localeCompare","completed","user","name","map","cn","key","setDeleteItem","buttons","SortPanel","dispatch","sortChange","URL_API","getData","url","fetch","response","json","getTodosFromServer","Promise","all","users","completedTodo","find","userId","App","visibleContent","loadTodos","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5ac5236.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst TODOS = 'TODOS';\nconst VISIBLE_CONTENT = 'VISIBLE_CONTENT';\nconst DELETE_TODO_ITEM = 'DELETE_TODO_ITEM';\nconst SORT_FIELD = 'SORT_FIELD';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message = 'No message') => ({ type: FINISH_LOADING, message });\nexport const setTodos = (todos: Todo[] = []) => ({ type: TODOS, todos });\nexport const setVisibleContent = () => ({ type: VISIBLE_CONTENT });\nexport const setDeleteItem = (index: number) => ({ type: DELETE_TODO_ITEM, index });\nexport const setSortField = (sort: string) => ({ type: SORT_FIELD, sort });\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getVisibleContent = (state: RootState) => state.visible;\nexport const getSort = (state: RootState) => state.sort;\n\n\n// Initial state\nexport type RootState = {\n  loading: boolean;\n  visible: boolean;\n  message: string;\n  todos: CompletedTodo[];\n  error: string;\n  sort: string;\n};\n\nconst initialState: RootState = {\n  loading: false,\n  visible: false,\n  message: '',\n  todos: [],\n  error: '',\n  sort: '',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n      };\n    case TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n    case VISIBLE_CONTENT:\n      return {\n        ...state,\n        visible: true,\n      };\n    case DELETE_TODO_ITEM:\n      return {\n        ...state,\n        todos: [...state.todos].filter(todo => todo.id !== action.index),\n      };\n    case SORT_FIELD:\n      return {\n        ...state,\n        sort: action.sort,\n      };\n    default:\n      return state;\n  }\n};\n\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RootState, isLoading, startLoading } from '../store';\n\n/**\n * mapState - is a function receiving full Redux state as the first argument\n * and returning an object with extra props that will be added to a component\n * after calling connect(mapState)(MyComponent)\n *\n * @param {object} state - full Redux state\n *\n * @return {object}\n */\nconst mapState = (state: RootState) => {\n  return {\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\n  };\n};\n\n/**\n * We use an object syntax for `mapDispatch` where\n * `load` - is a callback name passed to the component as a prop\n * `startLoading` - is an action creator defined in the store\n */\nconst mapDispatch = {\n  load: startLoading,\n};\n\n/**\n * We split the connect(mapState, mapDispatch)(MyComponent) into 2 parts\n * to be able to use `typeof connector` for `MyComponent` props\n */\nconst connector = connect(mapState, mapDispatch);\n\n/**\n * We use ConnectedProps<typeof connector> to get the type for all the extra\n * props received from `mapState` and `mapDispatch`\n */\ntype Props = ConnectedProps<typeof connector> & {\n  title: string; // a regular prop passed like <Start title=\"Start loading\" />\n  handleLoadClick: () => void;\n};\n\nconst Start: React.FC<Props> = ({ handleLoadClick, loading, title }) => {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      onClick={handleLoadClick}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default connector(Start);\n","import React from 'react';\nimport cn from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport {\n  getTodos,\n  setDeleteItem,\n  getSort,\n} from '../store';\n\n\nexport const TodoList = () => {\n  const dispath = useDispatch();\n  const todosTodoList = useSelector(getTodos);\n  const sortFromRedux = useSelector(getSort);\n\n\n  const deleteTodo = (index: number) => {\n    dispath(setDeleteItem(index));\n  };\n\n  const sort = (todos: CompletedTodo[], sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        return [...todos].sort((a, b) => {\n          return a.title.localeCompare(b.title);\n        });\n\n      case 'completed':\n        return [...todos].sort((a, b) => {\n          return +a.completed - +b.completed;\n        });\n\n      case 'user':\n        return [...todos].sort((a, b) => {\n          return a.user.name.localeCompare(b.user.name);\n        });\n\n      default:\n        return todos;\n    }\n  };\n\n  const SortTodos = sort(todosTodoList, sortFromRedux);\n\n  return (\n    <div>\n      {SortTodos.map(({\n        completed, user, title, id,\n      }) => (\n        <div\n          className={cn('alert',\n            { 'alert-success': completed, 'alert-primary': !completed })}\n          key={id}\n        >\n          <span className=\"todo-title\">{title}</span>\n          <span>{user.name}</span>\n          <button type=\"button\" onClick={() => deleteTodo(id)}> X</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setSortField } from '../store';\n\nconst buttons = [\n  { name: 'Sort by Name', sortType: 'title' },\n  { name: 'Sort by Completed', sortType: 'completed' },\n  { name: 'Sort by User Name', sortType: 'user' },\n];\n\n\nconst activeBtn = 'title';\n\nexport const SortPanel = () => {\n  const dispatch = useDispatch();\n  const sortChange = (sortType: string) => {\n    dispatch(setSortField(sortType));\n  };\n\n  return (\n    <p>\n      {buttons.map(({ name, sortType }) => {\n        return (\n          <button\n            type=\"button\"\n            key={name}\n            onClick={() => sortChange(sortType)}\n            className={sortType === activeBtn ? 'btn btn-warning active' : 'btn btn-warning'}\n          >\n            {name}\n          </button>\n        );\n      })}\n    </p>\n  );\n};\n","const URL_API = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport async function getData<T>(url: string): Promise<T[]> {\n  const response = await fetch(url);\n\n  return response.json();\n}\n\n\nexport async function getTodosFromServer() {\n  const [todos, users] = await Promise.all([\n    getData<Todo>(`${URL_API}/todos.json`),\n    getData<User>(`${URL_API}/users.json`),\n  ]);\n\n  const completedTodo = todos.map((todo) => {\n    return {\n      ...todo,\n      user: users.find(user => user.id === todo.userId),\n    };\n  });\n\n  return completedTodo;\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start';\nimport { TodoList } from './components/TodoList';\nimport { SortPanel } from './components/SortPanel';\n\nimport {\n  startLoading,\n  isLoading,\n  finishLoading,\n  getMessage,\n  setTodos,\n  setVisibleContent,\n  getVisibleContent,\n} from './store';\n\nimport { getTodosFromServer } from './helpers/api';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || '';\n  const visibleContent = useSelector(getVisibleContent);\n\n  const loadTodos = async () => {\n    dispatch(startLoading());\n    try {\n      const todosFromServer = await getTodosFromServer();\n\n      dispatch(setTodos(todosFromServer));\n      dispatch(finishLoading(''));\n      dispatch(setVisibleContent());\n    } catch (err) {\n      dispatch(finishLoading(`Something went wrong: ${err}`));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h5>{loading ? 'Loading...' : message}</h5>\n      {visibleContent ? (\n        <>\n          <SortPanel />\n          <TodoList />\n        </>\n      ) : (\n        <Start title=\"Start loading\" handleLoadClick={loadTodos} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}